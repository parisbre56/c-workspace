#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void putint(int* array,int sizey,int x, int y, int toput);
 /* Puts an int <toput> in an array with <sizex> rows  
  * and <sizey> collums in position <array>[<x>][<y>].
  */
int retrieveint(int* array,int sizey,int x,int y);
 /* Returns an int from an array with <sizey> collums
  * from position <array>[<x>][<y>].
  */
void printintarray(int* array,int sizex, int sizey);
 /* Prints an array with <sizex> rows and <sizey> collums.
  */
int* createintarray(int sizex,int sizey);
 /* Returns a pointer to the beginning of an array
  * with <sizex> rows and <sizey> collums.
  */


void printpreferences(int* malegroup,int* femalegroup,int size);
 /* Prints the preferences of first the male and then the female group
  * with a <size> number of members (rows). <malegroup> and <femalegroup>
  * should be square arrays, each row with <size> numbers (collumns). It is assumed 
  * that each number points a row in the other array. The first number in each
  * row is considered the most prefered by that person.
  */
void galeshapley(int* proposers,int* others,int size,int* result); 
 /* Returns the proposer optimal solution in <result>.
  * <proposers> and <others> hold the groups preference in a square array.
  * If proposer i is married to other j then result[i-1]=j.
  * <size> should be the number of couples to be married.
  */
//Probably hidden
int aremarried(int* check,int size);
 /* Returns 1 if all cells of 1D array <check> are not 0
  * else returns 0. <size> should be the size of array <check>
  */
void marryprop(int* proposers,int* others,int size,int*result,int tomarry);
/* Tries to marry proposer <tomarry> with the group <others> according to 
 * the proposers preference. <size> should be the number of couples to be married.
 */
int accepts(int* others,int* result,int size,int proposer, int other);
/* Returns 1 if <other> accepts to marry <proposer>, else returns 0.
 * <size> should be the number of couples to be married.
 */


void recstablemar(int* men,int* women,int* married,int size,int* solutioncount,int currentman);
/* Tries to marry each member of the <men> group to each member of the <women> group 
 * by order of male preference. The current marrieage state is held in <married>.
 * <size> should be the number of couples to be married. <solutioncount> holds
 * the number of solutions found so far with the recursive algorithm. It should be
 * started with a value of 0.<currentman> is used to tell the function for which man it is called.
 * <currentman> should be 1 when the function is called.
 */
int marstable(int* men,int* women,int* married,int size,int couples);

int single(int* married,int couples,int woman);

int state[1000];
int main(void)
{
	int i;//Used for "for" loops
	int j;//Used for "for" loops
	int ch;//Used for input
	int number;//The number of couples to be married
	int solutioncount;//Used to keep track of solutions in the recursive solution
	int* men;//Male preferences
	int* women;//Female preferences
	int* married;//Current marriege state
	
	//**Get input
	
	number=0;
	ch=getchar();
	while (ch!='\n') //Get the number of couples. Assumes normal input.
	{
		if (ch>='0'&&ch<='9')
		{
			number=number*10+(ch-'0');
		}
		ch=getchar();
	}


	for (i=0;i<number;i++)
	{
		state[i]=0;
	}
	men=createintarray(number,number);//2D array for storing male preference
	women=createintarray(number,number);//2D array for storing female preference
	married=createintarray(number,1);
	/* Actually creates a 1D array.It is used for storing the marriage state.
	 * If person i is married to j then married[i-1]=j.
	 * If person i is not married then married[i-1]=0.
	 */
	if (men==NULL||women==NULL||married==NULL)
	{
		printf("Error:Memmory allocation failure\n");
		free(men);
		free(women);
		free(married);
		return EXIT_FAILURE;
	}
	
	for (i=0;i<number;i++)
	{
		for (j=0;j<number;j++)
		{
			putint(men,number,i,j,0);
			while (ch==' '||ch=='\t'||ch=='\n')//Ignore empty. Assumes normal input
			{
				ch=getchar();
			}
			while (ch>='0'&&ch<='9')//Get male preference.
			{
				putint(men,number,i,j,retrieveint(men,number,i,j)*10+ch-'0');
				ch=getchar();
			}
		}
	}
	for (i=0;i<number;i++)
	{
		for (j=0;j<number;j++)
		{
			putint(women,number,i,j,0);
			while (ch==' '||ch=='\t'||ch=='\n')
			{
				ch=getchar();
			}
			while (ch>='0'&&ch<='9')//Get female preference.
			{
				putint(women,number,i,j,retrieveint(women,number,i,j)*10+ch-'0');
				ch=getchar();
			}
		}
	}
	
	//**Display input
	
	/*printf("%d\n",number);
	printintarray(men,number,number);
	printintarray(women,number,number);
	putchar('\n');*/
	
	printpreferences(men,women,number);
	putchar('\n');
	
	//**Gale-Shapley solution
	
	printf("Finding the male optimal solution with the Gale-Shapley algorithm...\n\n");
	galeshapley(men,women,number,married);
	printf("Male optimal solution:\n");
	for (i=0;i<number;i++)
	{
		printf("m%03d - w%03d\t",i+1,retrieveint(married,1,i,0));
	}
	putchar('\n');
	putchar('\n');
	
	printf("Finding the female optimal solution with the Gale-Shapley algorithm...\n\n");
	galeshapley(women,men,number,married);
	printf("Female optimal solution:\n");
	for (j=1;j<=number;j++)
	{
		for(i=0;i<number;i++)
		{
			if (retrieveint(married,1,i,0)==j)
			{
				printf("m%03d - w%03d\t",j,i+1);
			}
		}
	}
	putchar('\n');
	putchar('\n');
	
	//**Recursive solution
	
	for (i=0;i<number;i++)
	{
		putint(married,1,i,0,0);
	}
	solutioncount=0;
	printf("Finding all solutions with backtracking via recursion...\n\n");
	recstablemar(men,women,married,number,&solutioncount,1);
	if (solutioncount!=1)
	{
		printf("\nFound %d solutions\n",solutioncount);
	}
	else
	{
		printf("\nFound 1 solution\n");
	}
	free(men);
	free(women);
	free(married);
	return EXIT_SUCCESS;
}



int retrieveint(int* array,int sizey,int x,int y)
{
	
	return *(array+sizey*x+y);
}
void putint(int* array,int sizey,int x, int y, int toput)
{
	*(array+sizey*x+y)=toput;
}
void printintarray(int* array,int sizex, int sizey)
{
	int i,j;
	for (i=0;i<sizex;i++)
	{
		for (j=0;j<sizey;j++)
		{
			printf("  %d",retrieveint(array,sizey,i,j));
		}
		putchar('\n');
	}
}
int* createintarray(int sizex,int sizey)
{
	return malloc(sizex*sizey*sizeof(int)*sizeof(int));
}


void printpreferences(int* malegroup,int* femalegroup, int size)
{
	int i,j;
	for (i=0;i<size;i++)
	{
		printf("m%03d order of preferences:",i+1);
		for(j=0;j<size;j++)
		{
			printf(" w%03d",retrieveint(malegroup,size,i,j));
		}
		putchar('\n');
	}
	putchar('\n');
	for (i=0;i<size;i++)
	{
		printf("w%03d order of preferences:",i+1);
		for(j=0;j<size;j++)
		{
			printf(" m%03d",retrieveint(femalegroup,size,i,j));
		}
		putchar('\n');
	}
}
void galeshapley(int* proposers,int* others,int size,int* result)
{
	int i;
	for (i=0;i<size;i++)
	{
		putint(result,1,i,0,0);
	}
	while (!aremarried(result,size))
	{
		for(i=0;i<size;i++)//For all proposers
		{
			if (retrieveint(result,1,i,0)==0)//If they are not married
			{
				marryprop(proposers,others,size,result,i);//Then marry him/her
			}
		}
	}
}
int aremarried(int* check,int size)
{
	int i;
	for (i=0;i<size;i++)
	{
		if (retrieveint(check,1,i,0)==0)
		{
			return 0;
		}
	}
	return 1;	
}
void marryprop(int* proposers,int* others,int size,int*result,int tomarry)
{
	int i;
	for (i=0;retrieveint(result,1,tomarry,0)==0;i++)
	{
		//printf("m%03d proposes to w%03d, ",tomarry+1,retrieveint(proposers,size,tomarry,i));
		if (accepts(others,result,size,tomarry+1,retrieveint(proposers,size,tomarry,i)))
		{
			//printf("m%03d gets married to w%03d.\n",tomarry+1,retrieveint(proposers,size,tomarry,i));
			putint(result,1,tomarry,0,retrieveint(proposers,size,tomarry,i));
		}
		
	}
}
int accepts(int* others,int* result,int size,int proposer, int other)
{
	int i;
	int curmarried=0;
	for (i=0;i<size;i++)//For all men
	{
		if (retrieveint(result,1,i,0)==other)//If they are married to <other>
		{
			curmarried=i+1;//Store this
		}
	}
	if (curmarried==0)//If she is not married
	{
		//printf("she accepts.\n");
		return 1;
	}
	for (i=0;1;i++)//For all men
	{
		if(retrieveint(others,size,other-1,i)==curmarried)//If she prefers the one she is currently married to
		{
			//printf("she refuses.\n");
			//printf("w%03d stays married to m%03d.\n",other,curmarried);
			return 0;
		}
		if(retrieveint(others,size,other-1,i)==proposer)//If she prefers the proposer
		{
			//printf("she accepts.\n");
			//printf("w%03d divorces m%03d.\n",other,curmarried);
			putint(result,1,curmarried-1,0,0);
			return 1;
		}
	}
}

void recstablemar(int* men,int* women,int* married,int size,int* solutioncount,int currentman)
{
	int j;
	int i;
	int res;
	if (currentman==size+1)//If all have been married
	{
		printf("\nSolution %d:\n",++(*solutioncount));//Print the solution
		for (i=0;i<size;i++)
		{
			printf("m%03d - w%03d\t",i+1,retrieveint(married,1,i,0));
		}
		putchar('\n');
		putchar('\n');
		return;
	}
	for (i=0;i<size;i++)//For all women
	{
		state[currentman-1]=i+1;
		putchar('\r');
		for(j=0;j<size;j++)
		{
			printf("%3d/%d",state[j],size);
		}
		//printf("Trying to marry m%03d to w%03d\n",currentman,retrieveint(men,size,currentman-1,i));
		if (single(married,currentman,retrieveint(men,size,currentman-1,i)))
		{
			putint(married,1,currentman-1,0,retrieveint(men,size,currentman-1,i));//Marry currentman to <men>[<currentman>-1][<i>]
			/*for (j=0;j<size;j++)
			{
				printf("m%03d - w%03d\t",j+1,retrieveint(married,1,j,0));
			}
			putchar('\n');*/
			if (marstable(men,women,married,size,currentman))//If the marriages so far are stable
			{
				//printf("Success\n");
				recstablemar(men,women,married,size,solutioncount,currentman+1);//Check the next man
			}
			putint(married,1,currentman-1,0,0);//Divorce currentman
		}
	}
}
int marstable(int* men,int* women,int* married,int size,int couples)
{
	int i;
	int j;
	int k;
	int curmarried;
	for(i=0;i<couples;i++)//For all men
	{
		for(j=0;retrieveint(men,size,i,j)!=retrieveint(married,1,i,0);j++)//For all women man i+1 prefers more than the one he is currently married
		{
			curmarried=0; //The man woman <men>[<i>][<j>] is married to
			for(k=0;k<couples;k++)
			{
				if (retrieveint(married,1,k,0)==retrieveint(men,size,i,j))
				{
					curmarried=k+1;
				}
			}
			if (curmarried!=0)
			{
				for(k=0;retrieveint(women,size,retrieveint(men,size,i,j)-1,k)!=curmarried;k++)//For all men woman <men>[<i>][<j>] prefers more than the one she is currently married
				{
					if(retrieveint(women,size,retrieveint(men,size,i,j)-1,k)==i+1)
					{
						//printf("Failed, unstable\n");
						//printf("Blocking pair:m%03d - w%03d\n",i+1,retrieveint(men,size,i,j));
						return 0;
					}
				}
			}
		}
	}
	return 1;
}
int single(int* married,int couples,int woman)
{
	int i;
	int curmarried=0;
	for (i=0;i<couples;i++)//For all married men
	{
		if (retrieveint(married,1,i,0)==woman)//If they are married to <woman>
		{
			//printf("Failed, married.\n");
			return 0;//<woman> is not single
		}
	}
	return 1;//<woman> is single
}